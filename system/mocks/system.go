// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	libcnb "github.com/buildpacks/libcnb"
	libpak "github.com/paketo-buildpacks/libpak"

	mock "github.com/stretchr/testify/mock"
)

// System is an autogenerated mock type for the System type
type System struct {
	mock.Mock
}

// CachePath provides a mock function with given fields:
func (_m *System) CachePath() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefaultArguments provides a mock function with given fields:
func (_m *System) DefaultArguments() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DefaultTarget provides a mock function with given fields:
func (_m *System) DefaultTarget() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Detect provides a mock function with given fields: context, result
func (_m *System) Detect(context libcnb.DetectContext, result *libcnb.DetectResult) error {
	ret := _m.Called(context, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(libcnb.DetectContext, *libcnb.DetectResult) error); ok {
		r0 = rf(context, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Distribution provides a mock function with given fields: layersPath
func (_m *System) Distribution(layersPath string) string {
	ret := _m.Called(layersPath)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(layersPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DistributionLayer provides a mock function with given fields: resolver, cache, plan
func (_m *System) DistributionLayer(resolver libpak.DependencyResolver, cache libpak.DependencyCache, plan *libcnb.BuildpackPlan) (libcnb.LayerContributor, error) {
	ret := _m.Called(resolver, cache, plan)

	var r0 libcnb.LayerContributor
	if rf, ok := ret.Get(0).(func(libpak.DependencyResolver, libpak.DependencyCache, *libcnb.BuildpackPlan) libcnb.LayerContributor); ok {
		r0 = rf(resolver, cache, plan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(libcnb.LayerContributor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(libpak.DependencyResolver, libpak.DependencyCache, *libcnb.BuildpackPlan) error); ok {
		r1 = rf(resolver, cache, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Participate provides a mock function with given fields: resolver
func (_m *System) Participate(resolver libpak.PlanEntryResolver) (bool, error) {
	ret := _m.Called(resolver)

	var r0 bool
	if rf, ok := ret.Get(0).(func(libpak.PlanEntryResolver) bool); ok {
		r0 = rf(resolver)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(libpak.PlanEntryResolver) error); ok {
		r1 = rf(resolver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Wrapper provides a mock function with given fields:
func (_m *System) Wrapper() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
